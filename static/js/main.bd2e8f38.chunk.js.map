{"version":3,"sources":["Menu.js","ListPage.js","RankingPage.js","serviceWorker.js","index.js"],"names":["Menu","_this","this","react_default","a","createElement","class","code","name","url","map","page","props","selected","Link","to","Component","ListPage","state","activities","_this2","axios","get","concat","process","then","res","console","log","activity","data","setState","src_Menu","date","author","type","title","links","link","href","reduce","prev","curr","RankingPage","React","Boolean","window","location","hostname","match","routing","BrowserRouter","Route","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd2e8f38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass  Menu extends Component {\n    \n\n    render() {\n        const pages = [\n            {code: \"list\", name: \"Elenco\", url: \"/\"},\n            {code: \"ranking\", name: \"Classifica\", url: \"/ranking\"}\n          ];\n\n        return (        \n            <div class=\"filter-by flex grow wrap\">            \n                <div class=\"time-filter flex grow\">\n                    {pages.map(page =>                                                             \n                    <div class={\"row-button pointer align-center \" + (page.code == this.props.selected ? 'row-button--active' : '')}>\n                        <Link to={page.url}>{page.name}</Link>\n                    </div>    \n                    )}  \n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Menu;","import React, { Component } from 'react';\nimport './ListPage.css';\nimport Menu from './Menu';\nimport axios from 'axios';\n\nclass ListPage extends Component {\n  state = {\n    activities: []\n  }\n\n  componentDidMount() {\n    axios.get(`${process.env.PUBLIC_URL}/data.json`)\n      .then(res => {\n        console.log(res)        \n        const activity = res.data.activities\n        this.setState({ activities: activity });\n      });\n  }\n\n  render() {\n    return (\n      <div class=\"leaderboard flex column wrap\">\n      <div class=\"leaderboard-table flex column\">\n        <div class=\"leaderboard-header flex column grow\">\n\n          <Menu selected=\"list\"></Menu>\n\n          <div class=\"leaderboard-row flex align-center row--header\">\n            <div class=\"row-position\">Data</div>\n            <div class=\"row-collapse flex align-center\">\n              <div class=\"row-user--header\">Autore</div>\n              <div class=\"row-rank--header\">Tipo</div>\n              <div class=\"row-team--header\">Titolo</div>\n              <div class=\"row-team--header\">Links</div>\n            </div>            \n          </div>\n        </div>\n\n\n        <div class=\"leaderboard-body flex column grow\">\n          <div>        \n            <ul>\n              {this.state.activities.map(activity =>       \n                <div class=\"leaderboard-row flex align-center\">\n                  <div class=\"row-position\">{activity.date}</div>\n                  <div class=\"row-collapse flex align-center\">\n                      <div class=\"row-caller flex\">                  \n                        <div class=\"row-user\">{activity.author}</div>\n                      </div>                 \n                      <div class=\"row-team\">{activity.type}</div>\n                      <div class=\"row-team\">{activity.title}</div>\n                      <div class=\"row-rank\">\n                      {console.log(activity)}\n                      {activity.links.map(link =>\n                        <a href=\"{link.url}\">{link.type}</a>\n                      ).reduce((prev, curr) => [prev, ', ', curr])}\n                      </div>\n                  </div>          \n                </div>\n              )}\n            </ul>\n          </div>\n        </div>\n        <div class=\"leaderboard-footer flex align-center\">\n          Page 1 of 2 <a class=\"footer-btn pointer\">Next</a> 25 of 37 items\n        </div>\n      </div>\n\n    </div>\n    );\n  }\n}\n\nexport default ListPage;\n","import React from 'react';\nimport Menu from './Menu';\n\nclass RankingPage extends React.Component {\n    render() {\n        return (\n          <div class=\"leaderboard flex column wrap\">\n          <div class=\"leaderboard-table flex column\">\n            <div class=\"leaderboard-header flex column grow\">\n    \n              <Menu selected=\"ranking\"></Menu>\n    \n              <div class=\"leaderboard-row flex align-center row--header\">\n                <div class=\"row-position\">#</div>\n                <div class=\"row-collapse flex align-center\">\n                  <div class=\"row-user--header\">Score</div>\n                  <div class=\"row-rank--header\">Autore</div>                  \n                </div>            \n              </div>\n            </div>\n    \n            <div class=\"leaderboard-body flex column grow\">\n              <div>        \n                <ul>                  \n                </ul>\n              </div>\n            </div>\n            <div class=\"leaderboard-footer flex align-center\">\n              Page 1 of 2 <a class=\"footer-btn pointer\">Next</a> 25 of 37 items\n            </div>\n          </div>\n    \n        </div>\n        );\n      }\n    }\n\nexport default RankingPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ListPage from './ListPage';\nimport RankingPage from './RankingPage';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter } from 'react-router-dom'\n\nconst routing = (\n    <BrowserRouter>\n        <div class='router'>\n            <Route exact path=\"/\" component={ListPage} />\n            <Route path=\"/ranking\" component={RankingPage} />\n        </div>\n    </BrowserRouter>\n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}