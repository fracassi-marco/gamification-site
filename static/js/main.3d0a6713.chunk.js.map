{"version":3,"sources":["Menu.js","ListPage.js","RankingPage.js","AddPage.js","serviceWorker.js","index.js"],"names":["Menu","_this","this","react_default","a","createElement","className","code","name","url","map","page","index","key","props","selected","Link","to","Component","ListPage","links","link","link_index","href","type","reduce","acc","prev","activity","event","preventDefault","axios","post","then","activityDeleted","catch","console","log","_this2","src_Menu","scope","activities","sort","b","date","author","title","onClick","delete","bind","pointsOf","authorActivities","points","currentActivity","byPoints","RankingPage","xs","group","Object","entries","rv","x","push","entry","React","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","prevState","concat","toConsumableArray","id","target","value","item","_this3","newState","_this4","activityAdded","history","_this5","onSubmit","submit","htmlFor","onChange","change","placeholder","addLink","idx","typeId","urlId","data-id","updateLink","withRouter","Boolean","window","location","hostname","match","App","get","res","data","activityToDelete","filter","isNot","BrowserRouter","basename","process","Route","exact","path","render","src_ListPage","src_RankingPage","AddPage","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d0a6713.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass Menu extends Component {\n    render() {\n        const pages = [\n            { code: \"list\", name: \"List\", url: \"/\" },\n            { code: \"ranking\", name: \"Ranking\", url: \"/ranking\" },\n            { code: \"add\", name: \"+ Add\", url: \"/add\" }\n        ];\n\n        return (\n            <ul className=\"nav\">\n                {pages.map((page, index) =>\n                    <li key={'page' + index} className={\"nav-item \" + (page.code === this.props.selected ? 'active' : '')}>\n                        <Link to={page.url} className=\"nav-link\">{page.name}</Link>\n                    </li>\n                )}\n            </ul>\n        )\n    }\n}\n\nexport default Menu;","import React, { Component } from 'react';\nimport Menu from './Menu';\nimport axios from 'axios'\n\nclass ListPage extends Component {\n  links(index, links) {\n    return links\n    .map((link, link_index) => <a key={'link' + index + link_index} href={link.url}>{link.type}</a>)\n    .reduce((acc, prev) => {\n      if (acc === \"\")  return prev\n      return [acc, \", \", prev]\n    }, \"\")\n  }\n\n  delete(activity) {\n    return (event) => {\n      event.preventDefault()\n\n      axios.post(`https://539bk9ow41.execute-api.us-east-1.amazonaws.com/dev/delete`, activity)\n        .then(() => {\n          this.props.activityDeleted(activity)\n        })\n        .catch(console.log)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Menu selected=\"list\"></Menu>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\" className=\"date\">Date</th>\n                <th scope=\"col\">Author</th>\n                <th scope=\"col\">Type</th>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Links</th>\n                <th scope=\"col\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n            {this.props.activities.sort((a, b) => a.date < b.date ? 1 : -1).map((activity, index) =>\n              <tr key={'activity' + index}>\n                <td>{activity.date}</td>\n                <td>{activity.author}</td>\n                <td>{activity.type}</td>\n                <td>{activity.title}</td>\n                <td>{this.links(index, activity.links)}</td>\n                <td>\n                  <button type=\"button\" className=\"btn btn-sm btn-secondary\" onClick={this.delete(activity).bind(this)}>\n                    <span className=\"fa fa-trash\"></span>\n                  </button>\n                </td>\n              </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ListPage;\n","import React from 'react'\nimport Menu from './Menu'\n\nfunction groupBy (xs, key) {\n  return Object.entries(xs.reduce(function (rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x)\n    return rv\n  }, {}))\n}\n\nfunction pointsOf(authorActivities) {\n  return authorActivities.reduce((points, currentActivity) => {\n    if(currentActivity.date === '') {\n      return points\n    }\n    currentActivity.type === 'presentation' ? points+=3 : points++\n    return points\n  }, 0)\n}\n\nfunction byPoints(a, b) {\n  return pointsOf(a[1]) < pointsOf(b[1]) ? 1 : -1\n}\n\nclass RankingPage extends React.Component {\n  render() {\n    var group = groupBy(this.props.activities, \"author\")\n      .sort(byPoints)\n\n    return (\n      <div>\n        <Menu selected=\"ranking\"></Menu>\n        <div className=\"table-responsive\">\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Points</th>\n                <th scope=\"col\">Author</th>\n              </tr>\n            </thead>\n            <tbody>\n            {group.map((entry, index) =>\n              <tr key={'group' + index}>\n                <td>{index + 1}</td>\n                <td>{pointsOf(entry[1])}</td>  \n                <td>{entry[0]}</td>                              \n              </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n      )\n    }\n  }\n\n  export default RankingPage","import React, { Component } from 'react'\nimport Menu from './Menu'\nimport axios from 'axios'\nimport { withRouter } from \"react-router-dom\"\n\nclass ListPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            links: [{url: \"http://an.url\", type: \"submission\"}]\n        }\n    }\n\n    addLink() {\n        this.setState((prevState) => ({\n            links: [...prevState.links, {url:\"\", type:\"\"}],\n        }))\n    }\n\n    updateLink(id, type) {\n        return (event) => {\n            this.setState({\n                links: this.state.links.map((link, index) => {\n                    if (index === id) {\n                        link[type] = event.target.value\n                    }\n                    return link\n                })\n            })\n        }\n    }\n\n    change(item) {\n        return (event) => {\n            let newState = {}\n            newState[item] = event.target.value\n            this.setState(newState)\n        }\n    }\n\n    submit(event) {\n        event.preventDefault()\n\n        axios.post(`https://539bk9ow41.execute-api.us-east-1.amazonaws.com/dev/save`, this.state)\n            .then(() => {\n              //TODO: ok response\n              this.props.activityAdded(this.state)\n\n              this.props.history.push('/')\n            })\n            .catch(console.log)\n    }\n\n    render() {\n        return (\n            <div>\n                <Menu selected=\"add\"></Menu>\n                <form className=\"text-left p-3\" onSubmit={this.submit.bind(this)}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"date\">Date</label>\n                        <input type=\"text\" onChange={this.change(\"date\")} className=\"form-control\" placeholder=\"yyyy-MM-dd\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"author\">Author</label>\n                        <input type=\"text\" onChange={this.change(\"author\")} className=\"form-control\" placeholder=\"Author\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"type\">Type</label>\n                        <input type=\"text\" onChange={this.change(\"type\")} className=\"form-control\" placeholder=\"Type\" />\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\" onChange={this.change(\"title\")} className=\"form-control\" placeholder=\"Title\" />\n                    </div>\n                    <div className=\"text-right\">\n                      <button className=\"btn btn-sm btn-secondary\" type=\"button\" onClick={this.addLink.bind(this)}>Add Link</button>\n                    </div>\n                    {this.state.links.map((link, idx) => {\n                        let typeId = `type-${idx}`\n                        let urlId = `url-${idx}`\n\n                        return (\n\n                          <div className=\"row p-3\" key={idx}>\n                              <div className=\"col-sm-6\">\n                                  <label htmlFor={typeId}>Type</label>\n                                  <input\n                                      type=\"text\"\n                                      name={typeId}\n                                      data-id={idx}\n                                      id={typeId}\n                                      className=\"form-control\"\n                                      value={this.state.links[idx].type}\n                                      onChange={this.updateLink(idx, \"type\").bind(this)}\n                                  />\n                              </div>\n                              <div className=\"col-sm-6\">\n                                  <label htmlFor={urlId}>Url</label>\n                                  <input\n                                  type=\"text\"\n                                  name={urlId}\n                                  data-id={idx}\n                                  id={urlId}\n                                  className=\"form-control\"\n                                  value={this.state.links[idx].url}\n                                  onChange={this.updateLink(idx, 'url').bind(this)}\n                                  />\n                              </div>\n                          </div>\n                        )\n                    })}\n\n                    <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(ListPage)\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport ListPage from './ListPage'\nimport RankingPage from './RankingPage'\nimport AddPage from './AddPage'\nimport * as serviceWorker from './serviceWorker'\nimport { Route, BrowserRouter } from 'react-router-dom'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  state = {\n    activities: []\n  }\n\n  componentDidMount() {\n    axios.get(`https://539bk9ow41.execute-api.us-east-1.amazonaws.com/dev/read`)\n      .then(res => {\n        const activity = res.data\n        this.setState({ activities: activity })\n      })\n  }\n\n  isNot(activityToDelete) {\n    return (activity) => {\n      return !(activityToDelete.date === activity.date &&\n            activityToDelete.author === activity.author &&\n            activityToDelete.title === activity.title &&\n            activityToDelete.type === activity.type)\n    }\n  }\n\n  activityDeleted(activity) {\n    this.setState({ activities: this.state.activities.filter(this.isNot(activity)) })\n  }\n\n  activityAdded(activity) {\n    this.setState({ activities: [...this.state.activities, activity] })\n  }\n\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <div className='router a1'>\n              <Route exact path=\"/\" render={() => <ListPage activityDeleted={this.activityDeleted.bind(this)} activities={this.state.activities}/>}/>\n              <Route exact path=\"/ranking\" render={() => <RankingPage activities={this.state.activities}/>} />\n              <Route exact path=\"/add\" render={() => <AddPage activityAdded={this.activityAdded.bind(this)} activities={this.state.activities}/>} />\n          </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}