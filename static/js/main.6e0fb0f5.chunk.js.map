{"version":3,"sources":["serviceWorker.js","Menu.js","ListPage.js","RankingPage.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Menu","_this","this","react_default","a","createElement","className","code","name","url","map","page","index","key","props","selected","Link","to","Component","ListPage","src_Menu","activities","activity","date","author","type","title","links","link","link_index","href","reduce","prev","curr","RankingPage","React","Index","AppRouter","BrowserRouter","Route","path","exact","component","render","src_RankingPage","src_ListPage_0","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e0fb0f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass  Menu extends Component {\n    \n\n    render() {\n        const pages = [\n            {code: \"list\", name: \"Elenco\", url: \"/\"},\n            {code: \"ranking\", name: \"Classifica\", url: \"/ranking\"}\n          ];\n\n        return (        \n            <div className=\"filter-by flex grow wrap\">            \n                <div className=\"time-filter flex grow\">\n                    {pages.map((page, index) =>                                                             \n                    <div key={'page' + index} className={\"row-button pointer align-center \" + (page.code === this.props.selected ? 'row-button--active' : '')}>\n                        <Link to={page.url}>{page.name}</Link>\n                    </div>    \n                    )}  \n                </div>            \n            </div>\n        )\n    }\n}\n\nexport default Menu;","import React, { Component } from 'react';\nimport './ListPage.css';\nimport Menu from './Menu';\n\nclass ListPage extends Component {\n  render() {\n    return (\n      <div className=\"leaderboard flex column wrap\">\n      <div className=\"leaderboard-table flex column\">\n        <div className=\"leaderboard-header flex column grow\">\n\n          <Menu selected=\"list\"></Menu>\n\n          <div className=\"leaderboard-row flex align-center row--header\">\n            <div className=\"row-position\">Data</div>\n            <div className=\"row-collapse flex align-center\">\n              <div className=\"row-user--header\">Autore</div>\n              <div className=\"row-rank--header\">Tipo</div>\n              <div className=\"row-team--header\">Titolo</div>\n              <div className=\"row-team--header\">Links</div>\n            </div>            \n          </div>\n        </div>\n\n\n        <div className=\"leaderboard-body flex column grow\">\n              {this.props.activities.map((activity, index) =>       \n                <div key={'activity' + index} className=\"leaderboard-row flex align-center\">\n                  <div className=\"row-position\">{activity.date}</div>\n                  <div className=\"row-collapse flex align-center\">\n                      <div className=\"row-caller flex\">                  \n                        <div className=\"row-user\">{activity.author}</div>\n                      </div>                 \n                      <div className=\"row-team\">{activity.type}</div>\n                      <div className=\"row-team\">{activity.title}</div>\n                      <div className=\"row-rank\">\n                      {activity.links.map((link, link_index) =>\n                        <a key={'link' + index + link_index} href=\"{link.url}\">{link.type}</a>\n                      ).reduce((prev, curr) => [prev, ', ', curr])}\n                      </div>\n                  </div>          \n                </div>\n              )}\n          </div>\n        {/*<button onClick={this.props.doSomeEvent}>doSomeEvent</button>*/}\n      </div>\n\n    </div>\n    );\n  }\n}\n\nexport default ListPage;\n","import React from 'react';\nimport Menu from './Menu';\n\nclass RankingPage extends React.Component {\n    render() {\n        return (\n          <div className=\"leaderboard flex column wrap\">\n          <div className=\"leaderboard-table flex column\">\n            <div className=\"leaderboard-header flex column grow\">\n    \n              <Menu selected=\"ranking\"></Menu>\n    \n              <div className=\"leaderboard-row flex align-center row--header\">\n                <div className=\"row-position\">#</div>\n                <div className=\"row-collapse flex align-center\">\n                  <div className=\"row-user--header\">Punteggio</div>\n                  <div className=\"row-rank--header\">Autore</div>                  \n                </div>            \n              </div>\n            </div>\n    \n            <div className=\"leaderboard-body flex column grow\">\n              <div>        \n                <ul>                  \n                </ul>\n              </div>\n            </div>\n            </div>\n        </div>\n        );\n      }\n    }\n\nexport default RankingPage;","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ListPage from './ListPage';\nimport RankingPage from \"./RankingPage\";\n\nfunction Index() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div className=\"a2\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users/\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/ranking\" render={() => <RankingPage activities={[]}/>} />\n        <Route path=\"/users/\" render={() => <ListPage activities={[]}/>} />\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}